#pragma once

#include <windows.h>

#include "module_scanner.h"

namespace pesieve {

	//!  A report from the thread scan, generated by ThreadScanner
	class ThreadScanReport : public ModuleScanReport
	{
	public:
		ThreadScanReport(DWORD _tid)
			: ModuleScanReport(0, 0), tid(_tid)
		{
		}

		const virtual void fieldsToJSON(std::stringstream &outs, size_t level, const pesieve::t_json_level &jdetails)
		{
			ModuleScanReport::_toJSON(outs, level);
			outs << ",\n";
			OUT_PADDED(outs, level, "\"is_alertable\" : ");
			outs << isAlertable;
		}

		const virtual bool toJSON(std::stringstream& outs, size_t level, const pesieve::t_json_level &jdetails)
		{
			OUT_PADDED(outs, level, "\"thread_scan\" : {\n");
			fieldsToJSON(outs, level + 1, jdetails);
			outs << "\n";
			OUT_PADDED(outs, level, "}");
			return true;
		}
		std::set<ULONGLONG> routines;
		bool isAlertable;
		DWORD tid;
	};


	//!  A scanner for threads
	class ThreadScanner : public ProcessFeatureScanner {
	public:
		ThreadScanner(HANDLE hProc, DWORD _tid, ModulesInfo& _modulesInfo, peconv::ExportsMapper* _exportsMap)
			: ProcessFeatureScanner(hProc), tid(_tid), modulesInfo(_modulesInfo), exportsMap(_exportsMap)
		{
		}

		virtual ThreadScanReport* scanRemote();

	protected:
		bool resolveAddr(ULONGLONG addr);

		DWORD tid;
		ModulesInfo& modulesInfo;
		peconv::ExportsMapper* exportsMap;
	};

}; //namespace pesieve

