#pragma once

#include <windows.h>

#include "module_scanner.h"
#include "../utils/threads_util.h"

namespace pesieve {

	//!  A report from the thread scan, generated by ThreadScanner
	class ThreadScanReport : public ModuleScanReport
	{
	public:
		ThreadScanReport(DWORD _tid)
			: ModuleScanReport(0, 0), 
			tid(_tid), thread_start(0), thread_return(0), protection(0), exit_code(0)
		{
		}

		const virtual void fieldsToJSON(std::stringstream &outs, size_t level, const pesieve::t_json_level &jdetails)
		{
			ModuleScanReport::_toJSON(outs, level);
			outs << ",\n";

			OUT_PADDED(outs, level, "\"thread_id\" : ");
			outs << std::dec << tid;
			outs << ",\n";
			OUT_PADDED(outs, level, "\"thread_start\" : ");
			outs << "\"" << std::hex << thread_start << "\"";
			outs << ",\n";
			if (thread_return) {
				OUT_PADDED(outs, level, "\"thread_return\" : ");
				outs << "\"" << std::hex << thread_return << "\"";
				outs << ",\n";
			}
			if (exit_code) {
				OUT_PADDED(outs, level, "\"exit_code\" : ");
				outs << "\"" << std::hex << exit_code << "\"";
				outs << ",\n";
			}
			OUT_PADDED(outs, level, "\"protection\" : ");
			outs << "\"" << std::hex << protection << "\"";
		}

		const virtual bool toJSON(std::stringstream& outs, size_t level, const pesieve::t_json_level &jdetails)
		{
			OUT_PADDED(outs, level, "\"thread_scan\" : {\n");
			fieldsToJSON(outs, level + 1, jdetails);
			outs << "\n";
			OUT_PADDED(outs, level, "}");
			return true;
		}

		ULONGLONG thread_start;
		ULONGLONG thread_return;
		DWORD tid;
		DWORD protection;
		DWORD exit_code;
	};


	//!  A scanner for threads
	class ThreadScanner : public ProcessFeatureScanner {
	public:
		ThreadScanner(HANDLE hProc, const util::thread_info& _info, ModulesInfo& _modulesInfo, peconv::ExportsMapper* _exportsMap)
			: ProcessFeatureScanner(hProc), 
			info(_info), modulesInfo(_modulesInfo), exportsMap(_exportsMap)
		{
		}

		virtual ThreadScanReport* scanRemote();

	protected:
		bool resolveAddr(ULONGLONG addr);

		const util::thread_info& info;
		ModulesInfo& modulesInfo;
		peconv::ExportsMapper* exportsMap;
	};

}; //namespace pesieve

